#include <bits/stdc++.h>
using namespace std;

int n = 12;
vector<vector<int>> graph = {
        { 0, 8, 2, 0, 5, 1, 7, 3, 5, 9, 3, 7 },
        { 8, 0, 7, 5, 7, 1, 9, 1, 1, 6, 6, 9 },
        { 2, 7, 0, 9, 3, 5, 1, 9, 1, 0, 8, 0 },
        { 0, 5, 9, 0, 8, 8, 4, 0, 3, 5, 7, 8 },
        { 5, 7, 3, 8, 0, 1, 7, 3, 0, 6, 8, 9 },
        { 1, 1, 5, 8, 1, 0, 7, 0, 0, 8, 6, 9 },
        { 7, 9, 1, 4, 7, 7, 0, 0, 7, 2, 5, 8 },
        { 3, 1, 9, 0, 3, 0, 0, 0, 1, 8, 8, 1 },
        { 5, 1, 1, 3, 0, 0, 7, 1, 0, 8, 6, 9 },
        { 9, 6, 0, 5, 6, 8, 2, 8, 8, 0, 2, 7 },
        { 3, 6, 8, 7, 8, 6, 5, 8, 6, 2, 0, 4 },
        { 7, 9, 0, 8, 9, 9, 8, 1, 9, 7, 4, 0 }
};


class Edge {
public:
    int from, to, weight;
    Edge(int from = -1, int to = -1, int weight = 0) : from(from), to(to), weight(weight) {}

    Edge(const Edge &E) {
        from = E.from;
        to = E.to;
        weight = E.weight;
    }

    Edge& operator=(Edge const& edge) {
        from = edge.from;
        to = edge.to;
        weight = edge.weight;
        return *this;
    }

    int operator<(Edge &E) {
        return (weight < E.weight);
    }

    friend ostream &operator<<(ostream &s, Edge &e);
};

ostream &operator<<(ostream &s, Edge &e)
{
    s << "From: " << e.from << ", to: " << e.to << ", weight: " << e.weight;
    return s;
}

//template <class T>
//class Node
//{
//private:
//    T value;
//public:
//
//    //установить данные в узле
//    T getValue() { return value; }
//    void setValue(T v) { value = v; }
//
//    //сравнение узлов
//    int operator<(Node N)
//    {
//        return (value < N.getValue());
//    }
//
//    int operator<=(Node N)
//    {
//        return (value <= N.getValue());
//    }
//
//    int operator>(Node N)
//    {
//        return (value > N.getValue());
//    }
//
//    //вывод содержимого одного узла
//    void print()
//    {
//        cout << value;
//    }
//};
//
//template <class T>
//void print(Node<T>* N)
//{
//    cout << N->getValue() << "\n";
//}

//куча (heap)
template <class T>
class BinaryHeap
{
protected:
    //массив
    Edge* arr;
    //сколько элементов добавлено
    int len;
    //сколько памяти выделено
    int size;
public:

    //доступ к вспомогательным полям кучи и оператор индекса
    int getCapacity() { return size; }
    int getCount() { return len; }

    Edge& operator[](int index)
    {
        if (index < 0 || index >= len) {
            throw out_of_range("Index is out of bounds in operator[].\n");
        }

        return arr[index];
    }

    //конструктор
    BinaryHeap<T> (int MemorySize = 100)
    {
        arr = new Edge[MemorySize];
        len = 0;
        size = MemorySize;
    }

    //поменять местами элементы arr[index1], arr[index2]
    void Swap(int index1, int index2)
    {
        if (index1 < 0 || index1 >= len) {
            throw out_of_range("Index1 " + to_string(index1) + " is out of bounds in Swap.\n");
        }

        if (index2 < 0 || index2 >= len) {
            throw out_of_range("Index2 " + to_string(index2) + " is out of bounds in Swap.\n");
        }

        Edge temp;
        temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }

    //скопировать данные между двумя узлами
    void Copy(Edge* dest, Edge* source) {
        dest = source;
    }

    //функции получения левого, правого дочернего элемента, родителя или их индексов в массиве
    Node<T>* GetLeftChild(int index)
    {
        if (index < 0 || index * 2 >= len) {
            throw out_of_range("Index is out of bounds in GetLeftChild.\n");
        }
        return &arr[index * 2 + 1];
    }

    Node<T>* GetRightChild(int index)
    {
        if (index < 0 || index * 2 >= len) {
            throw out_of_range("Index is out of bounds in GetRightChild.\n");
        }

        return &arr[index * 2 + 2];
    }

    Node<T>* GetParent(int index)
    {
        if (index < 0 || index >= len) {
            throw out_of_range("Index is out of bounds in GetParent.\n");
        }

        if (index % 2 == 0)
            return &arr[index / 2 - 1];
        return &arr[index / 2];
    }

    int GetLeftChildIndex(int index)
    {
        if (index < 0 || index * 2 >= len) {
            string msg = "Index " + to_string(index) + " is out of bounds in GetLeftChildIndex.\n";
//            throw out_of_range(msg);
        }
        return index * 2 + 1;
    }

    int GetRightChildIndex(int index)
    {
        if (index < 0 || index * 2 >= len) {
            string msg = "Index " + to_string(index) + " is out of bounds in GetRightChildIndex.\n";
//            throw out_of_range(msg);

        }

        return index * 2 + 2;
    }

    int GetParentIndex(int index)
    {
        if (index < 0 || index >= len) {
            string msg = "Index " + to_string(index) + " is out of bounds in GetParentIndex.\n";
            throw out_of_range(msg);
        }

        if (index % 2 == 0)
            return index / 2 - 1;
        return index / 2;
    }

    //восстановление свойств кучи после удаления или добавления элемента
    void Heapify(int index = 0)
    {
        //то же, что и SiftDown
        //нужно сравнить элементы и при необходимости произвести просеивание вниз
        if (len == 0) return;
        if (index < 0 || index >= len) return;

        int left_child_index = GetLeftChildIndex(index);
        int right_child_index = GetRightChildIndex(index);

        if (index * 2 + 1 >= len) return;
        int min_child_index = 0;

        if (index * 2 + 2 >= len) {
            min_child_index = left_child_index;
        } else {
            min_child_index = arr[left_child_index] < arr[right_child_index] ? left_child_index: right_child_index;
        }

        if (arr[min_child_index] < arr[index]) {
            Swap(min_child_index, index);
            Heapify(min_child_index);
        }
    }

    //просеить элемент вверх
    void SiftUp(int index = -1)
    {
        if (len == 0) return;
        if (index == -1) index = len - 1;
        int parent_index = GetParentIndex(index);
        if (parent_index < 0) return;
        //нужно сравнить элементы и при необходимости произвести просеивание вверх
        if (arr[index] < arr[parent_index] ) {
            Swap(parent_index, index);
            SiftUp(parent_index);
        }
    }

    //удобный интерфейс для пользователя
//    template <class T>
    void push(T v) {
        Node<T>* N = new Node<T>;
        N->setValue(v);
        push(N);
    }

    //добавление элемента - вставляем его в конец массива и просеиваем вверх
//    template <class T>
    void push(Node<T>* N)
    {
        //добавить элемент и включить просеивание
        if (len < size) {
            arr[len] = *N;
            len++;
        } else {
            size = len + 1;
            arr = new Node<T>[len + 1];
            arr[len] = *N;
            len++;
        }
        SiftUp();

    }

    Node<T>* ExtractMin()
    {
        //исключить максимум и запустить просеивание кучи
        if (len == 0) return NULL;
        Node<T>* res = new Node<T>;
        Copy(res, &arr[0]);
        Swap(0, len - 1);
        len--;
        Heapify();

        return res;
    }

    //перечислить элементы кучи и применить к ним функцию
    void Straight(void(*f)(Node<T>*))
    {
        int i;
        for (i = 0; i < len; i++) {
            f(&arr[i]);
        }
    }

    //перебор элементов, аналогичный проходам бинарного дерева
    void PreOrder(void(*f)(Node<T>*), int index = 0)
    {
        if (index >= 0 && index < len)
            f(&arr[index]);
        if (GetLeftChildIndex(index) < len)
            PreOrder(f, GetLeftChildIndex(index));
        if (GetRightChildIndex(index) < len)
            PreOrder(f, GetRightChildIndex(index));
    }

    void InOrder(void(*f)(Node<T>*), int index = 0)
    {
        if (GetLeftChildIndex(index) < len)
            PreOrder(f, GetLeftChildIndex(index));
        if (index >= 0 && index < len)
            f(&arr[index]);
        if (GetRightChildIndex(index) < len)
            PreOrder(f, GetRightChildIndex(index));
    }

    void PostOrder(void(*f)(Node<T>*), int index = 0)
    {
        if (GetLeftChildIndex(index) < len)
            PreOrder(f, GetLeftChildIndex(index));
        if (GetRightChildIndex(index) < len)
            PreOrder(f, GetRightChildIndex(index));
        if (index >= 0 && index < len)
            f(&arr[index]);
    }

    bool empty() {
        if (len > 0) {
            return false;
        } else {
            return true;
        }
    }
};


tuple<int, vector<Edge>> prima() {
    int mst_weight = 0;
    BinaryHeap<Edge> edges;		//рассматриваемые ребра
    BinaryHeap<Edge> mst_edges;	//ребра в минимальном остове
    vector<int> used(n, 0);

    edges.push(Edge(0, 0, 0));

    while (!edges.empty()) {
        Node<Edge>* v = edges.ExtractMin();
        int to = it->to;
        int from = it->from;
        int w = it->weight;
        mst_weight += w;

        edges.erase(it);

        if (used[to]) continue;
        used[to] = 1;

        tree_edges.emplace_back(Edge(from, to, w));
        for ( int i = 0; i < n ; i++ ) {
            if ( graph[to][i] > 0 && !used[i] ) {
                edges.emplace_back(Edge(to, i, graph[to][i]));
            }
        }
    }

    tuple<int, vector<Edge>> ans = make_tuple(mst_weight, tree_edges);
    cout << mst_weight << endl;

    return ans;
}


int main() {
    cout << "------------------- playing with fire --------------------" << endl;

    BinaryHeap<int> heap;

    heap.push(5);
    heap.push(-1);
    heap.push(-2);
    heap.push(2);
    heap.push(5);
    heap.push(6);
    heap.push(-3);
    heap.push(-4);
    heap.push(4);
    heap.push(3);

    cout << "\n-----\nStraight:" << endl;
    void(*f_ptr)(Node<int>*); f_ptr = print;
    heap.Straight(f_ptr);
    int i = 0;
    cout << "\n-----\nExtractMin:" << endl;
    while (i < heap.getCount()) {
        Node<int>* N = heap.ExtractMin();
        N->print();
        delete N;
        cout << endl;
    }
    cout << "------------------- happy end --------------------" << endl;


    return 0;
}
